// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id     Int      @id @default(autoincrement())
  nome   String
  email  String   @unique
  senha  String
  perfis Perfil[]
  comentarios Comentario[]
  comentariosRecebidos Comentario[] @relation("RespostaComentario")
}

model Perfil {
  id               Int              @id @default(autoincrement())
  tipo             String
  nome             String
  descricao        String?
  usuario          Usuario          @relation(fields: [usuario_id], references: [id])
  usuario_id       Int
  notificacoes     Notificacao[]
  comentarios      Comentario[]
  avaliacoes       Avaliacao[]
  eventos          Evento[]
  recomendacoes    Recomendacao[]
  filmesAssistidos FilmesAssistidos[]
  filmesFavoritos  FilmesFavoritos[]
  filmesWatchLater FilmesWatchLater[]
}

model Notificacao {
  id        Int    @id @default(autoincrement())
  mensagem  String
  perfil    Perfil @relation(fields: [perfil_id], references: [id])
  perfil_id Int
}

model Filme {
  id             Int              @id @default(autoincrement())
  titulo         String
  sinopse        String?
  diretor        String?
  elenco         String[]
  genero         String[]
  avaliacaoMedia Float            @default(0.0)
  forums         Forum[]
  avaliacoes     Avaliacao[]
  enquetes       Enquete[]
  recomendacoes  Recomendacao[]
  assistidoPor   FilmesAssistidos[]
  favoritadoPor  FilmesFavoritos[]
  watchLaterPor  FilmesWatchLater[]
}

model Forum {
  id          Int          @id @default(autoincrement())
  filme       Filme        @relation(fields: [filme_id], references: [id])
  filme_id    Int
  comentarios Comentario[]
}

model Comentario {
  id             Int      @id @default(autoincrement())
  mensagem       String
  likes          Int      @default(0)
  usuario        Usuario  @relation(fields: [usuario_id], references: [id])
  usuario_id     Int
  perfil         Perfil   @relation(fields: [perfil_id], references: [id])
  perfil_id      Int
  forum          Forum    @relation(fields: [forum_id], references: [id])
  forum_id       Int
  respondendo    Usuario? @relation("RespostaComentario", fields: [respondendo_id], references: [id])
  respondendo_id Int?
}

model Avaliacao {
  id         Int     @id @default(autoincrement())
  nota       Float
  comentario String?
  curtidas   Int     @default(0)
  perfil     Perfil  @relation(fields: [perfil_id], references: [id])
  perfil_id  Int
  filme      Filme   @relation(fields: [filme_id], references: [id])
  filme_id   Int
}

model Comunidade {
  id       Int       @id @default(autoincrement())
  nome     String
  tipo     String
  eventos  Evento[]
  enquetes Enquete[]
}

model Evento {
  id            Int        @id @default(autoincrement())
  titulo        String
  data          DateTime
  perfil        Perfil     @relation(fields: [perfil_id], references: [id])
  perfil_id     Int
  comunidade    Comunidade @relation(fields: [comunidade_id], references: [id])
  comunidade_id Int
}

model Enquete {
  id            Int        @id @default(autoincrement())
  titulo        String
  opcoes        String[]
  comunidade    Comunidade @relation(fields: [comunidade_id], references: [id])
  comunidade_id Int
  filme         Filme?     @relation(fields: [filme_id], references: [id])
  filme_id      Int?
}

model Recomendacao {
  id        Int    @id @default(autoincrement())
  base      String
  perfil    Perfil @relation(fields: [perfil_id], references: [id])
  perfil_id Int
  filme     Filme  @relation(fields: [filme_id], references: [id])
  filme_id  Int
}

model FilmesAssistidos {
  id        Int    @id @default(autoincrement())
  perfil    Perfil @relation(fields: [perfil_id], references: [id])
  perfil_id Int
  filme     Filme  @relation(fields: [filme_id], references: [id])
  filme_id  Int

  @@unique([perfil_id, filme_id])
}

model FilmesFavoritos {
  id        Int    @id @default(autoincrement())
  perfil    Perfil @relation(fields: [perfil_id], references: [id])
  perfil_id Int
  filme     Filme  @relation(fields: [filme_id], references: [id])
  filme_id  Int

  @@unique([perfil_id, filme_id])
}

model FilmesWatchLater {
  id        Int    @id @default(autoincrement())
  perfil    Perfil @relation(fields: [perfil_id], references: [id])
  perfil_id Int
  filme     Filme  @relation(fields: [filme_id], references: [id])
  filme_id  Int

  @@unique([perfil_id, filme_id])
}

model ChatGroup {
  id          String        @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  createdBy   String
  members     GroupMember[]
  messages    Message[]
}

model GroupMember {
  id        String    @id @default(uuid())
  userId    String
  groupId   String
  role      String    @default("member")
  joinedAt  DateTime  @default(now())
  group     ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Message {
  id        String    @id @default(uuid())
  content   String
  groupId   String
  senderId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  isEdited  Boolean   @default(false)
  group     ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
